---
description: 
globs: 
alwaysApply: true
---
# Memory Bank Development Workflow

This guide outlines the process for using the memory-bank approach to manage development projects without depending on task-master or the Anthropic API.

## Important Update: Integration with Sequential Thinking

> **Note:** This workflow has been enhanced with Sequential Thinking. Please refer to the [sequential_thinking_workflow.mdc](mdc:.cursor/rules/sequential_thinking_workflow.mdc) rule for the integrated approach that should be used for all new development.

## Primary Interaction: Chat Interface with Memory Bank

Memory Bank offers a structured way to track project goals, tasks, progress, and architecture through markdown files:

1.  **Direct Chat Interface**:
    - All interactions with the Memory Bank happen through the chat interface with the AI assistant.
    - Request updates to specific memory-bank files when tasks are started, in progress, or completed.
    - Regularly refer to memory-bank files to guide development decisions and track progress.
    - Keep memory-bank files as the source of truth for project status and planning.

2.  **Key Memory Bank Files**:
    - `memory-bank/implementation-plan.md`: Contains the task breakdown and current status.
    - `memory-bank/progress.md`: Chronicles completed work with timestamps.
    - `memory-bank/architecture.md`: Documents system design, components, and interactions.
    - `memory-bank/tech-stack.md`: Lists libraries, tools, and technical requirements.
    - `memory-bank/Experiment-design-document.md`: Outlines research approach, goals, and design decisions.
    - `memory-bank/component-registry.md`: **Critical** documentation of all available components, their interfaces, and usage patterns. This is the **authoritative source of truth** for understanding the codebase structure before implementing new code.

## Standard Development Workflow Process

-   **Start coding sessions** by reviewing `implementation-plan.md` to see current tasks, status, and dependencies
-   **Determine the next task** to work on based on dependencies, priority level, and task ID
-   **Request task details** from the AI by asking about specific tasks listed in `implementation-plan.md`
-   **Break down complex tasks** into smaller subtasks by requesting updates to `implementation-plan.md`
-   **Implement code** following the task details, dependencies, and project standards
-   **Verify tasks** through testing before marking as complete
-   **Update `progress.md`** when tasks are completed, with timestamps
-   **Update dependent tasks** in `implementation-plan.md` when implementation details change
-   **Add new tasks** by requesting updates to `implementation-plan.md`
-   **Update `architecture.md`** when components or interactions change
-   **Respect dependency chains** and task priorities when selecting work
-   **Report progress regularly** by reviewing memory-bank files

## Test-Driven Development (TDD) Approach - **NON-NEGOTIABLE**

**Adherence to TDD is mandatory for all functional code changes.** This ensures code quality, reduces regressions, and clarifies requirements *before* implementation. Skipping TDD steps is **not permitted**.

- **Write Tests First:** **ALWAYS** write failing unit tests *before* writing any implementation code for a task or subtask. These tests define the contract and expected behavior.
- **Minimal Implementation:** Write **only** the code necessary to make the currently failing tests pass. **DO NOT** add extra functionality beyond the scope of the tests.
- **Refactor:** Once tests pass, refactor the code for clarity, efficiency, and maintainability, ensuring **all tests continue to pass** after refactoring.
- **Execute Tests:** **ALWAYS** run tests and demonstrate passing results before claiming completion. Screenshots or terminal output showing test execution results **MUST** be provided.
- **Test Coverage:** Strive for high test coverage. Code without tests is considered incomplete.
- **Task Completion:** A task or subtask is **ONLY** considered 'done' when its corresponding tests pass and the implementation meets project standards. **Verification through passing tests with evidence of test execution is mandatory.**

## Test Execution Evidence

- Every PR or task completion submission **MUST** include evidence that tests were actually executed and passed
- Acceptable evidence includes:
  - Terminal output showing test execution with passing results
  - Test runner output screenshots showing passing tests
  - CI/CD pipeline results showing successful test execution
- Simply writing tests without executing them is **NOT** acceptable
- When reporting task completion, always include:
  - The command used to run the tests
  - The complete test output showing passing results
  - Any test coverage information if available

## Task Structure in Implementation Plan

- **Task Number**: Sequential identifier (Example: `Task 4`)
- **Title**: Brief, descriptive title (Example: `"Implement Neural Causal Discovery Components"`)
- **Description**: Concise summary of what the task involves
- **Priority**: Importance level (high, medium, low)
- **Status**: Current state (pending, in-progress, done, deferred)
- **Dependencies**: Tasks that must be completed first
- **Subtasks**: List of smaller, more specific tasks with their own status

## Task Status Management

-   Use 'pending' for tasks ready to be worked on
-   Use 'in-progress' for tasks currently being implemented
-   Use 'done' for completed and verified tasks
-   Use 'deferred' for postponed tasks

## Iterative Task Implementation

Follow this iterative process for implementing tasks:

1.  **Understand the Goal (Preparation):**
    *   Review the task in `implementation-plan.md` to understand the specific goals and requirements.
    *   Ask the AI for clarification if needed.

2.  **Initial Exploration & Planning:**
    *   **Review the Component Registry:**
        *   Check `memory-bank/component-registry.md` to identify existing components related to your task
        *   Understand the interfaces and patterns you should follow
        *   Identify which components can be reused or extended
        *   See how your changes will integrate with the overall architecture
    *   Use Sequential Thinking to explore and break down the task systematically:
        *   Start with a clear problem definition
        *   Break the problem into logical components
        *   Identify dependencies and relationships
        *   Develop a step-by-step approach
        *   Anticipate challenges and prepare mitigation strategies
    *   Explore the codebase to identify the precise files, functions, and even specific lines of code that will need modification.
    *   Determine the intended code changes and their locations.
    *   Create a detailed implementation plan that follows existing component interfaces.

3.  **Log the Plan:**
    *   Ask the AI to update `implementation-plan.md` with your detailed plan.
    *   Include file paths, line numbers, proposed changes, reasoning, and any potential challenges.

4.  **Begin Implementation:**
    *   Ask the AI to update the task status to 'in-progress' in `implementation-plan.md`.
    *   Start coding based on the plan.

5.  **Refine and Log Progress:**
    *   As implementation progresses, update the AI on challenges, discoveries, and progress.
    *   Request updates to `implementation-plan.md` to reflect current status.
    *   Document:
        *   What worked ("fundamental truths" discovered).
        *   What didn't work and why (to avoid repeating mistakes).
        *   Specific code snippets or configurations that were successful.
        *   Decisions made and their reasoning.
        *   Any deviations from the initial plan and the reasoning.

6.  **Implement and Test (Core Loop):**
    *   Write/modify code according to the plan.
    *   Write/update unit tests covering the changes.
    *   **Run the tests and iterate until all tests pass.**

7.  **Review & Update Rules:**
    *   Once implementation is complete and tests pass, review code changes.
    *   Identify any new patterns or best practices.
    *   Update Cursor rules in `.cursor/rules/` directory as needed.

8.  **Mark Task Complete:**
    *   After verification and passing tests, ask the AI to update `implementation-plan.md` to mark the task as 'done'.
    *   Request an update to `progress.md` with details and timestamp.

9.  **Update Dependent Tasks:**
    *   After completing a task, review all pending tasks in `implementation-plan.md`.
    *   For each pending task, evaluate if implementation choices affect its approach.
    *   Request updates to dependent tasks as needed.

10. **Update Memory Bank Documentation:**
    *   Request updates to the relevant memory-bank files:
        *   `component-registry.md`: **REQUIRED** for all new components or significant modifications to existing ones.
        *   `Experiment-design-document.md`: For changes to high-level design or goals.
        *   `tech-stack.md`: For new libraries or tools.
        *   `implementation-plan.md`: For task status updates.
        *   `progress.md`: For completed task records.
        *   `architecture.md`: For new or modified components.

11. **Commit Changes:**
    *   Stage and commit all code changes and memory-bank updates.
    *   Create a detailed commit message referencing the task.

12. **Proceed to Next Task:**
    *   Only after completing all previous steps, move to the next task based on `implementation-plan.md`.

## Code Analysis & Refactoring Techniques

- **Top-Level Function Search**:
    - Useful for understanding module structure or planning refactors.
    - Use grep/ripgrep to find exported functions/constants:
      `rg "export (async function|function|const) \w+"` or similar patterns.

## Memory Bank File Update Guidelines

When requesting memory-bank file updates, follow these guidelines:

- **Be Specific**: Clearly state which file needs updating and what changes are needed.
- **Provide Context**: Explain why the update is necessary and how it relates to current work.
- **Include Details**: For task updates, include status changes, implementation notes, and dependency changes.
- **Request Timestamps**: Always include current date when updating `progress.md`.
- **Verify Updates**: After the AI makes changes, review them to ensure accuracy.

## Example Memory Bank Update Requests

```
"Please update memory-bank/implementation-plan.md to mark Task 4.2 as 'in-progress' and add these implementation notes: [details]"

"Please update memory-bank/progress.md to add Task 4.1 as completed today, with these key accomplishments: [details]"

"Please update memory-bank/architecture.md to include the new GraphEncoder component with its interactions"
```

## Memory Bank for Neural Network Amortized Approach

For the current Amortized Causal Discovery project:

- `implementation-plan.md` details the 7 core tasks that make up our neural network-based approach
- Tasks 1-3 have been completed, providing the foundation for causal modeling
- Tasks 4-7 focus on neural implementation of graph structure learning, dynamics modeling, CBO, and evaluation
- Review the task dependency structure to ensure tasks are completed in logical order
- Pay special attention to Task 4 (Neural Causal Discovery Components) as the current priority

---
*This workflow provides a general guideline for using memory-bank files to track and manage project development. Adapt it based on your specific project needs.*
