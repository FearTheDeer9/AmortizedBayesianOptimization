Product Requirements Document: Fix Meta-CBO Example Workflow

**1. Goal:**
Make the `examples/meta_cbo_workflow.py` script fully functional, demonstrating the end-to-end Meta-CBO process with real implementations instead of placeholders.

**2. Current State & Problems:**
The current script (`examples/meta_cbo_workflow.py`) fails or produces non-meaningful results due to:
    - Reliance on `GraphFactory.create_random_graph` which doesn't guarantee Directed Acyclic Graphs (DAGs), causing validation failures in `MetaCBO`.
    - Use of placeholder implementations for core components (`PlaceholderSCM`, `PlaceholderTaskRepresentation`, `PlaceholderMAML`, `generate_task_family`).
    - Missing implementations for several methods called within the example script (`MetaCBO.plot_meta_training_progress`, `MetaCBO.visualize_task_graph`, `MetaCBO.evaluate_adaptation_performance`).
    - Incomplete implementation of core `MetaCBO` logic (`optimize_interventions`, `evaluate`, causal estimation within acquisition function).

**3. Requirements:**

    3.1. **Ensure DAG Generation/Handling:**
        - Modify `GraphFactory` to include a reliable method for generating random DAGs (e.g., `create_random_dag`).
        - OR Modify the example script to use a known DAG-generating method from the factory (e.g., predefined structures like `chain`).
        - OR Adjust the `MetaCBO._validate_and_store_graph` logic to handle potentially non-DAG inputs *if* appropriate for the example's purpose (less desirable). Choose one primary approach.

    3.2. **Replace Placeholder Implementations:**
        - Integrate the actual `StructuralCausalModel` implementation (from Task 12) into the example, replacing `PlaceholderSCM`. Ensure it provides necessary methods like `sample_data` and `perform_intervention`.
        - Integrate the actual `TaskRepresentation` implementation (from Task 18) into the example, replacing `PlaceholderTaskRepresentation`. Ensure `embed_task` is functional.
        - Integrate the actual `MAML` implementation (from Task 17) into the example, replacing `PlaceholderMAML`. Ensure `inner_loop_update`, `outer_loop_update`, and `state_dict`/`load_state_dict` are functional.
        - Implement and integrate the actual `generate_task_family` function (from Task 10), likely within `causal_meta.graph.generators.task_families`.

    3.3. **Implement Missing MetaCBO Utility Methods:**
        - Implement `MetaCBO.plot_meta_training_progress` using matplotlib or similar.
        - Implement `MetaCBO.visualize_task_graph` using a graph visualization utility.
        - Implement `MetaCBO.evaluate_adaptation_performance`.

    3.4. **Complete Core MetaCBO Logic:**
        - Implement the actual Bayesian Optimization loop within `MetaCBO.optimize_interventions`, including GP model fitting/updating, calling `_select_next_intervention`, simulating/performing interventions via the SCM, and updating the dataset.
        - Implement the `_select_next_intervention` method fully, including the `CausalExpectedImprovement` acquisition function.
        - Implement the `CausalExpectedImprovement.forward` method fully, including the logic to map a BoTorch point back to a specific (node, value) intervention for causal estimation.
        - Implement the actual `MetaCBO._estimate_causal_effect` method, potentially linking to separate causal effect estimation utilities (e.g., backdoor adjustment).
        - Implement the `MetaCBO.evaluate` method.

    3.5. **Final Workflow Validation:**
        - Ensure the `examples/meta_cbo_workflow.py` script runs end-to-end without errors using the real implementations.
        - Verify that the output reflects a meaningful Meta-CBO process (meta-training shows learning, adaptation occurs, interventions are selected logically, evaluations produce metrics).


**4. Non-Goals:**
    - Implementing entirely new features not required for the example workflow.
    - Extensive hyperparameter tuning for the example.
    - Adding new visualization types beyond basic graph and progress plotting.

**5. Priority:** High - The example workflow is crucial for demonstrating the project's capabilities. 